- name: "get root token"
  slurp: 
    src: "~/vault-keys.txt"
  become: true
  register: vault_keys_output

- name: "set vault keys"
  set_fact: 
    vault_keys: "{{ vault_keys_output['content'] | b64decode }}"

- name: "Check vault initalised"
  shell: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault status -format json"
  become: true
  register: vault_status_output
  failed_when: "vault_status_output.rc not in [ 0, 2 ]"

- name: "Set status"
  set_fact: 
    vault_status: "{{ vault_status_output.stdout | from_json }}" 

- name: "initialise vault"
  shell: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault operator init -format yaml"
  become: true 
  run_once: True
  register: vault_init_output
  when: not vault_status.initialized 

- name: "unseal vault"
  shell: "docker exec  -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault operator unseal {{ vault_keys.unseal_keys_b64[item] }}"
  when: vault_status.sealed 
  become: true
  with_items: 
    - 0
    - 1
    - 2

- name: "vault login"
  shell: "docker exec  -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault login {{ vault_keys.root_token }}"
  become: true

- name: "Check Vault Root backend exists"
  shell: "docker exec  -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault read {{ vault_root_ca_name }}/cert/ca"
  register: root_backend_exists
  failed_when: "root_backend_exists.rc not in [ 0, 2 ]"

- name: "Check Vault Issuing backend exists"
  shell: "docker exec  -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault read {{ vault_intermediate_ca_name }}/cert/ca"
  register: issuing_backend_exists
  failed_when: "issuing_backend_exists.rc not in [ 0, 2 ]"

- name: "RootCA Backend"
  block:
    - name: "Enable PKI Root Backend"
      shell: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault secrets enable -path={{ vault_root_ca_name }} -description=\"{{ vault_root_ca_name }} CA v1\" pki"

    - name: "Tune Root Backend"
      shell: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault secrets tune -max-lease-ttl=87660h {{ vault_root_ca_name }}"

    - name: "Generate Cert and Priv Key"
      shell: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault write {{ vault_root_ca_name }}/root/generate/internal common_name=\"{{ vault_root_ca_name }} CA v1\" ttl=87660h key_bits=4096"
  when: root_backend_exists.rc == 2

- name: "Issuing CA Backend" 
  block: 
    - name: "Enable PKI Intermediate Backend"
      shell: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault secrets enable -path={{ vault_intermediate_ca_name }} -description=\"{{ vault_intermediate_ca_name }} CA v1\" pki"

    - name: "Tune Issuing Backend"
      shell: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault secrets tune -max-lease-ttl=43830h {{ vault_intermediate_ca_name }}"

    - name: "Generate Issuing CSR "
      shell: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault write {{ vault_intermediate_ca_name }}/intermediate/generate/exported common_name=\"{{ vault_intermediate_ca_name }} CA v1\" key_bits=4096 ttl=43830h -format=json"
      register: issuing_ca_csr_output

    - name: "Set exported Intermediate"
      set_fact: 
        issuing_ca_csr: "{{ issuing_ca_csr_output.stdout | from_json }}"

    - name: "Create CSR for export"
      copy:
        dest: /tmp/issuing.csr
        content: "{{ issuing_ca_csr.data.csr }}"
      delegate_to: localhost

    - name: "Create private key for export"
      copy:
        dest: /tmp/issuing.key
        content: "{{ issuing_ca_csr.data.private_key }}"
      delegate_to: localhost

    - name: "Create CSR"
      copy:
        dest: /tmp/issuing.csr
        content: "{{ issuing_ca_csr.data.csr }}"
    
    - name: "Create private"
      copy:
        dest: /tmp/issuing.key
        content: "{{ issuing_ca_csr.data.private_key }}"

    - name: "Copy CSR"
      shell: docker cp /tmp/issuing.csr {{ vault_docker_name }}:/
      become: true

    - name: "Sign Issuing CSR"
      shell: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault write {{ vault_root_ca_name }}/root/sign-intermediate csr=@/issuing.csr format=pem_bundle ttl=43830h -format=json"
      register: issuing_ca_crt_output

    - name: "Set CSR"
      set_fact: 
        issuing_ca_crt: "{{ issuing_ca_crt_output.stdout | from_json }}"

    - name: "Create intermediate pem bundle"
      copy:
        dest: /tmp/issuing-bundle.pem
        content: | 
          {{ issuing_ca_crt.data.certificate }}
          {{ issuing_ca_crt.data.issuing_ca }}
          {{ issuing_ca_csr.data.private_key }}

    - name: "Create intermediate pem bundle for export"
      copy:
        dest: /tmp/issuing-bundle.pem
        content: | 
          {{ issuing_ca_crt.data.certificate }}
          {{ issuing_ca_crt.data.issuing_ca }}
          {{ issuing_ca_csr.data.private_key }}
      delegate_to: localhost

    - name: "Create RootCA for export"
      copy: 
        dest: /tmp/rootCA.crt
        content: | 
          {{ issuing_ca_crt.data.issuing_ca }}
      delegate_to: localhost

    - name: "Copy Cert"
      shell: docker cp /tmp/issuing-bundle.pem vault:/
      become: true

    - name: "Set Issuing CRT"
      shell: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }}  vault write {{ vault_intermediate_ca_name }}/intermediate/set-signed certificate=@/issuing-bundle.pem format=pem_bundle ttl=43830h"

    - name: "Create ServerRole"
      shell: 'docker exec -e "VAULT_ADDR={{ vault_api_addr }}" {{ vault_docker_name }}  vault write {{ vault_intermediate_ca_name }}/roles/ServerCert max_ttl=8760h ttl=8760h allow_localhost=true allow_any_name=true allow_ip_sans=true server_flag=true key_type=rsa key_bits=4096 country="GB" locality="England" organization="StackHPC" ou="ops"'

    - name: Generate the certificates  
      shell: docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' "{{ vault_docker_name }}" vault write "{{ vault_intermediate_ca_name }}"/issue/ServerCert common_name="vault" ip_sans="{{ kolla_internal_vip_address }}" -format=json
      register: certs_and_keys_output

    - name: "Set vault cert and keys"
      set_fact: 
        vault_cert_and_key: "{{ certs_and_keys_output.stdout | from_json }}"

    - name: "Create vault cert for export"
      copy:
        dest: /tmp/vault.crt
        content: |
            {{ vault_cert_and_key.data.certificate }}
            {{ vault_cert_and_key.data.issuing_ca }}
      delegate_to: localhost

    - name: "Create vault private key for export"
      copy:
        dest: /tmp/vault.key
        content: "{{ vault_cert_and_key.data.private_key }}"
      delegate_to: localhost
  when: issuing_backend_exists.rc == 2
