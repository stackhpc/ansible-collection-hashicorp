---
- name: Ensure vault container is running
  docker_container:
    name: "{{ vault_docker_name }}"
    image: "{{ vault_docker_image }}:{{ vault_docker_tag }}"
    network_mode: host
    etc_hosts: "{{ vault_container.etc_hosts | default(omit) }}"
    capabilities: IPC_LOCK
    volumes: "{{ _vault_volumes }}"
    comparisons:
      '*': strict
    restart_policy: "always"
    env:
      VAULT_LOCAL_CONFIG: "{{ vault_config | to_json }}"
    command: >
      server
  become: true

- name: Copy CA into vault
  command: >-
    "docker cp {{ '/etc/pki/ca-trust/source/anchors/rootCA.crt' if ansible_os_family == 'RedHat' else '/usr/local/share/ca-certificates/rootCA.crt' }}
    {{ vault_docker_name }}:/usr/local/share/ca-certificates/rootCA.crt"
  when: copy_self_signed_ca | bool
  become: true

- name: Update trust store
  command: "docker exec {{ vault_docker_name }} update-ca-certificates"
  when: copy_self_signed_ca | bool

- name: Check if vault is initialized
  uri:
    url: "{{ vault_api_addr }}/v1/sys/init"
  register: vault_init_status
  retries: 50
  delay: 1
  until: vault_init_status.status == 200

- name: Initialize vault
  command: "docker exec -e 'VAULT_ADDR={{ vault_api_addr }}' {{ vault_docker_name }} vault operator init -format yaml"
  when: not vault_init_status.json.initialized
  run_once: true
  register: vault_init_output

- name: Set fact
  set_fact:
    vault_keys: "{{ vault_init_output.stdout | from_yaml }}"
  when: not vault_init_status.json.initialized

- name: "Write vault keys to filesystem"
  copy:
    dest: "~/vault-keys.txt"
    mode: "0400"
    content: |
      {{ vault_keys }}
  become: true
  when: not vault_init_status.json.initialized
