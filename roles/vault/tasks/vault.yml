---
- name: Ensure vault container is running
  docker_container:
    name: "{{ vault_docker_name }}"
    image: "{{ vault_docker_image }}:{{ vault_docker_tag }}"
    network_mode: host
    etc_hosts: "{{ vault_container.etc_hosts | default(omit) }}"
    capabilities: IPC_LOCK
    volumes: "{{ _vault_volumes }}"
    comparisons:
      '*': strict
    restart_policy: "always"
    env:
      VAULT_LOCAL_CONFIG: "{{ vault_config | to_json }}"
    command: >
      server
  become: true

- name: Copy CA into vault
  command: >-
    docker cp {{ '/etc/pki/ca-trust/source/anchors/rootCA.crt' if ansible_facts.os_family == 'RedHat' else '/usr/local/share/ca-certificates/rootCA.crt' }}
    {{ vault_docker_name }}:/usr/local/share/ca-certificates/rootCA.crt
  when: copy_self_signed_ca | bool
  become: true

- name: Update trust store
  command: "docker exec {{ vault_docker_name }} update-ca-certificates"
  when: copy_self_signed_ca | bool

- name: Check if vault is initialized
  uri:
    url: "{{ vault_api_addr }}/v1/sys/init"
  register: vault_init_status
  retries: 50
  delay: 1
  run_once: true
  until: vault_init_status.status == 200

- block:
    - name: Initialize vault
      hashivault_init:
        url: "{{ vault_api_addr }}"
      no_log: true
      register: vault_keys_result

    - name: Print vault keys
      debug:
        var: vault_keys_result
      when:
        - vault_log_keys | bool

    - name: Set vault_keys fact
      set_fact:
        vault_keys: "{{ vault_keys_result }}"
      when:
        - vault_set_keys_fact | bool

    - name: Write vault keys to a file
      copy:
        content: "{{ vault_keys_result | to_nice_json }}"
        dest: "{{ vault_write_keys_file_path }}"
        mode: 0600
      delegate_to: "{{ vault_write_keys_file_host }}"
      when:
        - vault_write_keys_file | bool
  run_once: true
  when:
    - not vault_init_status.json.initialized
